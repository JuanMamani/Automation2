// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 11.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace CodeUIOutLook5
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.HtmlControls;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    using System.Threading;


    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public partial class UIMap
    {

        /// <summary>
        /// RecordedMethod1 - Use 'RecordedMethod1Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod1()
        {
            #region Variable Declarations
            WinButton uITasksButton = this.UIInboxMicrosoftOutlooWindow.UIItemWindow.UINUIDocumentWindowClient.UITasksButton;
            WinButton uIContactsButton = this.UIInboxMicrosoftOutlooWindow.UIItemWindow.UINUIDocumentWindowClient.UIContactsButton;
            WinButton uICalendarButton = this.UIInboxMicrosoftOutlooWindow.UIItemWindow.UINUIDocumentWindowClient.UICalendarButton;
            WinButton uIMailButton = this.UIInboxMicrosoftOutlooWindow.UIItemWindow.UINUIDocumentWindowClient.UIMailButton;
            WinTreeItem uITAFTreeItem = this.UIInboxMicrosoftOutlooWindow.UIPersonalFoldersTreeItem.UITAFTreeItem;
            WinTreeItem uIInboxTreeItem = this.UIInboxMicrosoftOutlooWindow.UINUIDocumentWindowClient.UIInboxTreeItem;
            WinControl uINewDropDown = this.UIInboxMicrosoftOutlooWindow.UIStandardToolBar.UINewDropDown;
            WinEdit uITOEdit = this.UIUntitledMessageHTMLWindow.UIItemWindow.UITOEdit;
            WinEdit uICCEdit = this.UIUntitledMessageHTMLWindow.UIItemWindow1.UICCEdit;
            WinEdit uISubjectEdit = this.UIUntitledMessageHTMLWindow.UIItemWindow2.UISubjectEdit;
            WinButton uITOButton = this.UIUntitledMessageHTMLWindow.UITOWindow.UITOButton;
            WinButton uISendButton = this.UIUntitledMessageHTMLWindow.UITOWindow.UISendButton;
            #endregion

            // Launch '%ProgramFiles%\Microsoft Office\Office12\OUTLOOK.EXE'
            ApplicationUnderTest uIInboxMicrosoftOutlooWindow = ApplicationUnderTest.Launch(this.RecordedMethod1Params.UIInboxMicrosoftOutlooWindowExePath, this.RecordedMethod1Params.UIInboxMicrosoftOutlooWindowAlternateExePath);

            // Click 'Tasks' button
            Mouse.Click(uITasksButton);

            // Click 'Contacts' button
            Mouse.Click(uIContactsButton);

            // Click 'Calendar' button
            Mouse.Click(uICalendarButton);

            // Click 'Mail' button
            Mouse.Click(uIMailButton);

            // Click 'Personal Folders' -> 'TAF' tree item
            Mouse.Click(uITAFTreeItem);

            // Click 'Inbox' tree item
            Mouse.Click(uIInboxTreeItem);

            // Click 'New' DropDown
            Mouse.Click(uINewDropDown);

            // Type 'juan' in 'To' text box
            uITOEdit.Text = this.RecordedMethod1Params.UITOEditText;

            // Type 'mamani' in 'Cc' text box
            uICCEdit.Text = this.RecordedMethod1Params.UICCEditText;

            // Type 'test' in 'Subject:' text box
            uISubjectEdit.Text = this.RecordedMethod1Params.UISubjectEditText;

            // Click 'To&...' button
            //Mouse.Click(uITOButton);
            Mouse.Click(uISendButton);

            // Click 'Personal Folders' -> 'TAF' tree item
            Mouse.Click(uITAFTreeItem);
        }

        /// <summary>
        /// AssertSendMailName - Use 'AssertSendMailNameExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertSendMailName()
        {
            #region Variable Declarations
            WinEdit uISubjectEdit = this.UIInboxMicrosoftOutlooWindow.UIItemWindow1.UISubjectEdit;
            #endregion
            Thread.Sleep(2000);
            // Verify that the 'CopyPastedText' property of 'Subject' text box equals 'QE - TAF Daily Builds Testing - Build 2140'
            Assert.AreEqual(this.AssertSendMailNameExpectedValues.UISubjectEditCopyPastedText, uISubjectEdit.CopyPastedText, "The message was not found");
        }

        /// <summary>
        /// AssertNameSend - Use 'AssertNameSendExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertNameSend()
        {
            #region Variable Declarations
            WinEdit uIFromEdit = this.UIInboxMicrosoftOutlooWindow.UIItemWindow2.UIFromEdit;
            #endregion

            // Verify that the 'AccessibleDescription' property of 'From' text box equals 'NameSend'
            Assert.AreEqual(this.AssertNameSendExpectedValues.UIFromEditAccessibleDescription, uIFromEdit.AccessibleDescription, "Other User");
        }

        /// <summary>
        /// AssertMethod1To - Use 'AssertMethod1ToExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod1To()
        {
            #region Variable Declarations
            WinEdit uITOEdit = this.UIInboxMicrosoftOutlooWindow.UIItemWindow3.UITOEdit;
            #endregion

            // Verify that the 'AccessibleDescription' property of 'To:' text box equals 'to'
            Assert.AreEqual(this.AssertMethod1ToExpectedValues.UITOEditAccessibleDescription, uITOEdit.AccessibleDescription, "to different");
        }

        /// <summary>
        /// RecordedMethod2Options - Use 'RecordedMethod2OptionsParams' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod2Options()
        {
            #region Variable Declarations
            WinMenuItem uIOrganizeMenuItem = this.UIInboxMicrosoftOutlooWindow.UIMenuBarMenuBar.UIToolsMenuItem.UIOrganizeMenuItem;
            HtmlHyperlink uIUsingColorsHyperlink = this.UIInboxMicrosoftOutlooWindow.UIItemClient.UIOrganizeWebviewDocument.UIUsingColorsHyperlink;
            HtmlComboBox uISl2ToFromColorComboBox = this.UIInboxMicrosoftOutlooWindow.UIItemClient.UIOrganizeWebviewDocument.UISl2ToFromColorComboBox;
            HtmlComboBox uISelColors1ComboBox = this.UIInboxMicrosoftOutlooWindow.UIItemClient.UIOrganizeWebviewDocument.UISelColors1ComboBox;
            HtmlHyperlink uIUsingViewsHyperlink = this.UIInboxMicrosoftOutlooWindow.UIItemClient.UIOrganizeWebviewDocument.UIUsingViewsHyperlink;
            HtmlList uISelViewList = this.UIInboxMicrosoftOutlooWindow.UIItemClient.UIOrganizeWebviewDocument.UISelViewList;
            #endregion

            // Click 'Tools' -> 'Organize' menu item
            Mouse.Click(uIOrganizeMenuItem);

            // Click 'Using Colors' link
            Mouse.Click(uIUsingColorsHyperlink);

            // Select 'Lime' in 'sl2ToFromColor' combo box
            uISl2ToFromColorComboBox.SelectedItem = this.RecordedMethod2OptionsParams.UISl2ToFromColorComboBoxSelectedItem;

            // Select 'Auto' in 'selColors1' combo box
            uISelColors1ComboBox.SelectedItem = this.RecordedMethod2OptionsParams.UISelColors1ComboBoxSelectedItem;

            // Click 'Using Views' link
            Mouse.Click(uIUsingViewsHyperlink);

            // Select 'Message Timeline' in 'selView' list box
            uISelViewList.SelectedItemsAsString = this.RecordedMethod2OptionsParams.UISelViewListSelectedItemsAsString;

            // Click 'Tools' -> 'Organize' menu item
            Mouse.Click(uIOrganizeMenuItem);
        }

        #region Properties
        public virtual RecordedMethod1Params RecordedMethod1Params
        {
            get
            {
                if ((this.mRecordedMethod1Params == null))
                {
                    this.mRecordedMethod1Params = new RecordedMethod1Params();
                }
                return this.mRecordedMethod1Params;
            }
        }

        public virtual AssertSendMailNameExpectedValues AssertSendMailNameExpectedValues
        {
            get
            {
                if ((this.mAssertSendMailNameExpectedValues == null))
                {
                    this.mAssertSendMailNameExpectedValues = new AssertSendMailNameExpectedValues();
                }
                return this.mAssertSendMailNameExpectedValues;
            }
        }

        public virtual AssertNameSendExpectedValues AssertNameSendExpectedValues
        {
            get
            {
                if ((this.mAssertNameSendExpectedValues == null))
                {
                    this.mAssertNameSendExpectedValues = new AssertNameSendExpectedValues();
                }
                return this.mAssertNameSendExpectedValues;
            }
        }

        public virtual AssertMethod1ToExpectedValues AssertMethod1ToExpectedValues
        {
            get
            {
                if ((this.mAssertMethod1ToExpectedValues == null))
                {
                    this.mAssertMethod1ToExpectedValues = new AssertMethod1ToExpectedValues();
                }
                return this.mAssertMethod1ToExpectedValues;
            }
        }

        public virtual RecordedMethod2OptionsParams RecordedMethod2OptionsParams
        {
            get
            {
                if ((this.mRecordedMethod2OptionsParams == null))
                {
                    this.mRecordedMethod2OptionsParams = new RecordedMethod2OptionsParams();
                }
                return this.mRecordedMethod2OptionsParams;
            }
        }

        public UIInboxMicrosoftOutlooWindow UIInboxMicrosoftOutlooWindow
        {
            get
            {
                if ((this.mUIInboxMicrosoftOutlooWindow == null))
                {
                    this.mUIInboxMicrosoftOutlooWindow = new UIInboxMicrosoftOutlooWindow();
                }
                return this.mUIInboxMicrosoftOutlooWindow;
            }
        }

        public UIUntitledMessageHTMLWindow UIUntitledMessageHTMLWindow
        {
            get
            {
                if ((this.mUIUntitledMessageHTMLWindow == null))
                {
                    this.mUIUntitledMessageHTMLWindow = new UIUntitledMessageHTMLWindow();
                }
                return this.mUIUntitledMessageHTMLWindow;
            }
        }
        #endregion

        #region Fields
        private RecordedMethod1Params mRecordedMethod1Params;

        private AssertSendMailNameExpectedValues mAssertSendMailNameExpectedValues;

        private AssertNameSendExpectedValues mAssertNameSendExpectedValues;

        private AssertMethod1ToExpectedValues mAssertMethod1ToExpectedValues;

        private RecordedMethod2OptionsParams mRecordedMethod2OptionsParams;

        private UIInboxMicrosoftOutlooWindow mUIInboxMicrosoftOutlooWindow;

        private UIUntitledMessageHTMLWindow mUIUntitledMessageHTMLWindow;
        #endregion
    }

    /// <summary>
    /// Parameters to be passed into 'RecordedMethod1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class RecordedMethod1Params
    {

        #region Fields
        /// <summary>
        /// Launch '%ProgramFiles%\Microsoft Office\Office12\OUTLOOK.EXE'
        /// </summary>
        public string UIInboxMicrosoftOutlooWindowExePath = "C:\\Program Files\\Microsoft Office\\Office12\\OUTLOOK.EXE";

        /// <summary>
        /// Launch '%ProgramFiles%\Microsoft Office\Office12\OUTLOOK.EXE'
        /// </summary>
        public string UIInboxMicrosoftOutlooWindowAlternateExePath = "%ProgramFiles%\\Microsoft Office\\Office12\\OUTLOOK.EXE";

        /// <summary>
        /// Type 'juan' in 'To' text box
        /// </summary>
        public string UITOEditText = "Ben@test.com";

        /// <summary>
        /// Type 'mamani' in 'Cc' text box
        /// </summary>
        public string UICCEditText = "Juan.mamani@test.com";

        /// <summary>
        /// Type 'test' in 'Subject:' text box
        /// </summary>
        public string UISubjectEditText = "QE - TAF Daily Builds Testing - Build 2140";
        #endregion
    }

    /// <summary>
    /// Parameters to be passed into 'AssertSendMailName'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class AssertSendMailNameExpectedValues
    {

        #region Fields
        /// <summary>
        /// Verify that the 'CopyPastedText' property of 'Subject' text box equals 'QE - TAF Daily Builds Testing - Build 2140'
        /// </summary>
        public string UISubjectEditCopyPastedText = "QE - TAF Daily Builds Testing - Build 2140";
        #endregion
    }

    /// <summary>
    /// Parameters to be passed into 'AssertNameSend'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class AssertNameSendExpectedValues
    {

        #region Fields
        /// <summary>
        /// Verify that the 'AccessibleDescription' property of 'From' text box equals 'NameSend'
        /// </summary>
        public string UIFromEditAccessibleDescription = "Juan Mamani Delgado";
        #endregion
    }

    /// <summary>
    /// Parameters to be passed into 'AssertMethod1To'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class AssertMethod1ToExpectedValues
    {

        #region Fields
        /// <summary>
        /// Verify that the 'AccessibleDescription' property of 'To:' text box equals 'to'
        /// </summary>
        public string UITOEditAccessibleDescription = "Ben Daley";
        #endregion
    }

    /// <summary>
    /// Parameters to be passed into 'RecordedMethod2Options'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class RecordedMethod2OptionsParams
    {

        #region Fields
        /// <summary>
        /// Select 'Lime' in 'sl2ToFromColor' combo box
        /// </summary>
        public string UISl2ToFromColorComboBoxSelectedItem = "Lime";

        /// <summary>
        /// Select 'Auto' in 'selColors1' combo box
        /// </summary>
        public string UISelColors1ComboBoxSelectedItem = "Auto";

        /// <summary>
        /// Select 'Message Timeline' in 'selView' list box
        /// </summary>
        public string UISelViewListSelectedItemsAsString = "Message Timeline";
        #endregion
    }

    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIInboxMicrosoftOutlooWindow : WinWindow
    {

        public UIInboxMicrosoftOutlooWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Inbox - Microsoft Outlook";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "rctrl_renwnd32";
            this.WindowTitles.Add("Inbox - Microsoft Outlook");
            this.WindowTitles.Add("To-Do List - Microsoft Outlook");
            this.WindowTitles.Add("Contacts - Microsoft Outlook");
            this.WindowTitles.Add("Calendar - Microsoft Outlook");
            this.WindowTitles.Add("TAF - Microsoft Outlook");
            #endregion
        }

        #region Properties
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }

        public UIPersonalFoldersTreeItem UIPersonalFoldersTreeItem
        {
            get
            {
                if ((this.mUIPersonalFoldersTreeItem == null))
                {
                    this.mUIPersonalFoldersTreeItem = new UIPersonalFoldersTreeItem(this);
                }
                return this.mUIPersonalFoldersTreeItem;
            }
        }

        public UINUIDocumentWindowClient1 UINUIDocumentWindowClient
        {
            get
            {
                if ((this.mUINUIDocumentWindowClient == null))
                {
                    this.mUINUIDocumentWindowClient = new UINUIDocumentWindowClient1(this);
                }
                return this.mUINUIDocumentWindowClient;
            }
        }

        public UIStandardToolBar UIStandardToolBar
        {
            get
            {
                if ((this.mUIStandardToolBar == null))
                {
                    this.mUIStandardToolBar = new UIStandardToolBar(this);
                }
                return this.mUIStandardToolBar;
            }
        }

        public UIItemWindow1 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow1(this);
                }
                return this.mUIItemWindow1;
            }
        }

        public UIItemWindow2 UIItemWindow2
        {
            get
            {
                if ((this.mUIItemWindow2 == null))
                {
                    this.mUIItemWindow2 = new UIItemWindow2(this);
                }
                return this.mUIItemWindow2;
            }
        }

        public UIItemWindow3 UIItemWindow3
        {
            get
            {
                if ((this.mUIItemWindow3 == null))
                {
                    this.mUIItemWindow3 = new UIItemWindow3(this);
                }
                return this.mUIItemWindow3;
            }
        }

        public UIMenuBarMenuBar UIMenuBarMenuBar
        {
            get
            {
                if ((this.mUIMenuBarMenuBar == null))
                {
                    this.mUIMenuBarMenuBar = new UIMenuBarMenuBar(this);
                }
                return this.mUIMenuBarMenuBar;
            }
        }

        public UIItemClient UIItemClient
        {
            get
            {
                if ((this.mUIItemClient == null))
                {
                    this.mUIItemClient = new UIItemClient(this);
                }
                return this.mUIItemClient;
            }
        }
        #endregion

        #region Fields
        private UIItemWindow mUIItemWindow;

        private UIPersonalFoldersTreeItem mUIPersonalFoldersTreeItem;

        private UINUIDocumentWindowClient1 mUINUIDocumentWindowClient;

        private UIStandardToolBar mUIStandardToolBar;

        private UIItemWindow1 mUIItemWindow1;

        private UIItemWindow2 mUIItemWindow2;

        private UIItemWindow3 mUIItemWindow3;

        private UIMenuBarMenuBar mUIMenuBarMenuBar;

        private UIItemClient mUIItemClient;
        #endregion
    }

    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIItemWindow : WinWindow
    {

        public UIItemWindow(UITestControl searchLimitContainer) :
            base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "NetUIHWND";
            this.WindowTitles.Add("Inbox - Microsoft Outlook");
            this.WindowTitles.Add("To-Do List - Microsoft Outlook");
            this.WindowTitles.Add("Contacts - Microsoft Outlook");
            this.WindowTitles.Add("Calendar - Microsoft Outlook");
            #endregion
        }

        #region Properties
        public UINUIDocumentWindowClient UINUIDocumentWindowClient
        {
            get
            {
                if ((this.mUINUIDocumentWindowClient == null))
                {
                    this.mUINUIDocumentWindowClient = new UINUIDocumentWindowClient(this);
                }
                return this.mUINUIDocumentWindowClient;
            }
        }
        #endregion

        #region Fields
        private UINUIDocumentWindowClient mUINUIDocumentWindowClient;
        #endregion
    }

    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UINUIDocumentWindowClient : WinClient
    {

        public UINUIDocumentWindowClient(UITestControl searchLimitContainer) :
            base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Inbox - Microsoft Outlook");
            this.WindowTitles.Add("To-Do List - Microsoft Outlook");
            this.WindowTitles.Add("Contacts - Microsoft Outlook");
            this.WindowTitles.Add("Calendar - Microsoft Outlook");
            #endregion
        }

        #region Properties
        public WinButton UITasksButton
        {
            get
            {
                if ((this.mUITasksButton == null))
                {
                    this.mUITasksButton = new WinButton(this);
                    #region Search Criteria
                    this.mUITasksButton.SearchProperties[WinButton.PropertyNames.Name] = "Tasks";
                    this.mUITasksButton.WindowTitles.Add("Inbox - Microsoft Outlook");
                    #endregion
                }
                return this.mUITasksButton;
            }
        }

        public WinButton UIContactsButton
        {
            get
            {
                if ((this.mUIContactsButton == null))
                {
                    this.mUIContactsButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContactsButton.SearchProperties[WinButton.PropertyNames.Name] = "Contacts";
                    this.mUIContactsButton.WindowTitles.Add("To-Do List - Microsoft Outlook");
                    #endregion
                }
                return this.mUIContactsButton;
            }
        }

        public WinButton UICalendarButton
        {
            get
            {
                if ((this.mUICalendarButton == null))
                {
                    this.mUICalendarButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICalendarButton.SearchProperties[WinButton.PropertyNames.Name] = "Calendar";
                    this.mUICalendarButton.WindowTitles.Add("Contacts - Microsoft Outlook");
                    #endregion
                }
                return this.mUICalendarButton;
            }
        }

        public WinButton UIMailButton
        {
            get
            {
                if ((this.mUIMailButton == null))
                {
                    this.mUIMailButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMailButton.SearchProperties[WinButton.PropertyNames.Name] = "Mail";
                    this.mUIMailButton.WindowTitles.Add("Calendar - Microsoft Outlook");
                    #endregion
                }
                return this.mUIMailButton;
            }
        }
        #endregion

        #region Fields
        private WinButton mUITasksButton;

        private WinButton mUIContactsButton;

        private WinButton mUICalendarButton;

        private WinButton mUIMailButton;
        #endregion
    }

    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIPersonalFoldersTreeItem : WinTreeItem
    {

        public UIPersonalFoldersTreeItem(UITestControl searchLimitContainer) :
            base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTreeItem.PropertyNames.Name] = "Personal Folders";
            this.WindowTitles.Add("Inbox - Microsoft Outlook");
            #endregion
        }

        #region Properties
        public WinTreeItem UITAFTreeItem
        {
            get
            {
                if ((this.mUITAFTreeItem == null))
                {
                    this.mUITAFTreeItem = new WinTreeItem(this);
                    #region Search Criteria
                    this.mUITAFTreeItem.SearchProperties[WinTreeItem.PropertyNames.Name] = "TAF";
                    this.mUITAFTreeItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUITAFTreeItem.WindowTitles.Add("Inbox - Microsoft Outlook");
                    #endregion
                }
                return this.mUITAFTreeItem;
            }
        }
        #endregion

        #region Fields
        private WinTreeItem mUITAFTreeItem;
        #endregion
    }

    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UINUIDocumentWindowClient1 : WinClient
    {

        public UINUIDocumentWindowClient1(UITestControl searchLimitContainer) :
            base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("TAF - Microsoft Outlook");
            #endregion
        }

        #region Properties
        public WinTreeItem UIInboxTreeItem
        {
            get
            {
                if ((this.mUIInboxTreeItem == null))
                {
                    this.mUIInboxTreeItem = new WinTreeItem(this);
                    #region Search Criteria
                    this.mUIInboxTreeItem.SearchProperties[WinTreeItem.PropertyNames.Name] = "Inbox";
                    this.mUIInboxTreeItem.WindowTitles.Add("TAF - Microsoft Outlook");
                    #endregion
                }
                return this.mUIInboxTreeItem;
            }
        }
        #endregion

        #region Fields
        private WinTreeItem mUIInboxTreeItem;
        #endregion
    }

    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIStandardToolBar : WinToolBar
    {

        public UIStandardToolBar(UITestControl searchLimitContainer) :
            base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinToolBar.PropertyNames.Name] = "Standard";
            this.WindowTitles.Add("Inbox - Microsoft Outlook");
            #endregion
        }

        #region Properties
        public WinControl UINewDropDown
        {
            get
            {
                if ((this.mUINewDropDown == null))
                {
                    this.mUINewDropDown = new WinControl(this);
                    #region Search Criteria
                    this.mUINewDropDown.SearchProperties[UITestControl.PropertyNames.Name] = "New";
                    this.mUINewDropDown.SearchProperties[UITestControl.PropertyNames.ControlType] = "DropDown";
                    this.mUINewDropDown.WindowTitles.Add("Inbox - Microsoft Outlook");
                    #endregion
                }
                return this.mUINewDropDown;
            }
        }
        #endregion

        #region Fields
        private WinControl mUINewDropDown;
        #endregion
    }

    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIItemWindow1 : WinWindow
    {

        public UIItemWindow1(UITestControl searchLimitContainer) :
            base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "4101";
            this.WindowTitles.Add("TAF - Microsoft Outlook");
            #endregion
        }

        #region Properties
        public WinEdit UISubjectEdit
        {
            get
            {
                if ((this.mUISubjectEdit == null))
                {
                    this.mUISubjectEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUISubjectEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Subject";
                    this.mUISubjectEdit.WindowTitles.Add("TAF - Microsoft Outlook");
                    #endregion
                }
                return this.mUISubjectEdit;
            }
        }
        #endregion

        #region Fields
        private WinEdit mUISubjectEdit;
        #endregion
    }

    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIItemWindow2 : WinWindow
    {

        public UIItemWindow2(UITestControl searchLimitContainer) :
            base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "4097";
            this.WindowTitles.Add("TAF - Microsoft Outlook");
            #endregion
        }

        #region Properties
        public WinEdit UIFromEdit
        {
            get
            {
                if ((this.mUIFromEdit == null))
                {
                    this.mUIFromEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIFromEdit.SearchProperties[WinEdit.PropertyNames.Name] = "From";
                    this.mUIFromEdit.WindowTitles.Add("TAF - Microsoft Outlook");
                    #endregion
                }
                return this.mUIFromEdit;
            }
        }
        #endregion

        #region Fields
        private WinEdit mUIFromEdit;
        #endregion
    }

    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIItemWindow3 : WinWindow
    {

        public UIItemWindow3(UITestControl searchLimitContainer) :
            base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "4099";
            this.WindowTitles.Add("TAF - Microsoft Outlook");
            #endregion
        }

        #region Properties
        public WinEdit UITOEdit
        {
            get
            {
                if ((this.mUITOEdit == null))
                {
                    this.mUITOEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITOEdit.SearchProperties[WinEdit.PropertyNames.Name] = "To:";
                    this.mUITOEdit.WindowTitles.Add("TAF - Microsoft Outlook");
                    #endregion
                }
                return this.mUITOEdit;
            }
        }
        #endregion

        #region Fields
        private WinEdit mUITOEdit;
        #endregion
    }

    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIMenuBarMenuBar : WinMenuBar
    {

        public UIMenuBarMenuBar(UITestControl searchLimitContainer) :
            base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "Menu Bar";
            this.WindowTitles.Add("TAF - Microsoft Outlook");
            #endregion
        }

        #region Properties
        public UIToolsMenuItem UIToolsMenuItem
        {
            get
            {
                if ((this.mUIToolsMenuItem == null))
                {
                    this.mUIToolsMenuItem = new UIToolsMenuItem(this);
                }
                return this.mUIToolsMenuItem;
            }
        }
        #endregion

        #region Fields
        private UIToolsMenuItem mUIToolsMenuItem;
        #endregion
    }

    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIToolsMenuItem : WinMenuItem
    {

        public UIToolsMenuItem(UITestControl searchLimitContainer) :
            base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "Tools";
            this.WindowTitles.Add("TAF - Microsoft Outlook");
            #endregion
        }

        #region Properties
        public WinMenuItem UIOrganizeMenuItem
        {
            get
            {
                if ((this.mUIOrganizeMenuItem == null))
                {
                    this.mUIOrganizeMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIOrganizeMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Organize";
                    this.mUIOrganizeMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIOrganizeMenuItem.WindowTitles.Add("TAF - Microsoft Outlook");
                    #endregion
                }
                return this.mUIOrganizeMenuItem;
            }
        }
        #endregion

        #region Fields
        private WinMenuItem mUIOrganizeMenuItem;
        #endregion
    }

    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIItemClient : WinClient
    {

        public UIItemClient(UITestControl searchLimitContainer) :
            base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.ClassName] = "Internet Explorer_Server";
            this.WindowTitles.Add("TAF - Microsoft Outlook");
            #endregion
        }

        #region Properties
        public UIOrganizeWebviewDocument UIOrganizeWebviewDocument
        {
            get
            {
                if ((this.mUIOrganizeWebviewDocument == null))
                {
                    this.mUIOrganizeWebviewDocument = new UIOrganizeWebviewDocument(this);
                }
                return this.mUIOrganizeWebviewDocument;
            }
        }
        #endregion

        #region Fields
        private UIOrganizeWebviewDocument mUIOrganizeWebviewDocument;
        #endregion
    }

    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIOrganizeWebviewDocument : HtmlDocument
    {

        public UIOrganizeWebviewDocument(UITestControl searchLimitContainer) :
            base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = "thebody";
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Organize Webview";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "outday:///";
            this.WindowTitles.Add("TAF - Microsoft Outlook");
            #endregion
        }

        #region Properties
        public HtmlHyperlink UIUsingColorsHyperlink
        {
            get
            {
                if ((this.mUIUsingColorsHyperlink == null))
                {
                    this.mUIUsingColorsHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIUsingColorsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = "txt1";
                    this.mUIUsingColorsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIUsingColorsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIUsingColorsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Using Colors ";
                    this.mUIUsingColorsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "C:/PROGRA~1/MIF5BA~1/Office12/1033/OUTLWVW.DLL/";
                    this.mUIUsingColorsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIUsingColorsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "res://C:\\PROGRA~1\\MIF5BA~1\\Office12\\1033\\OUTLWVW.DLL/";
                    this.mUIUsingColorsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = "option";
                    this.mUIUsingColorsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "style=\"TEXT-DECORATION: underline\" id=tx";
                    this.mUIUsingColorsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "5";
                    this.mUIUsingColorsHyperlink.WindowTitles.Add("TAF - Microsoft Outlook");
                    #endregion
                }
                return this.mUIUsingColorsHyperlink;
            }
        }

        public HtmlComboBox UISl2ToFromColorComboBox
        {
            get
            {
                if ((this.mUISl2ToFromColorComboBox == null))
                {
                    this.mUISl2ToFromColorComboBox = new HtmlComboBox(this);
                    #region Search Criteria
                    this.mUISl2ToFromColorComboBox.SearchProperties[HtmlComboBox.PropertyNames.Id] = "sl2ToFromColor";
                    this.mUISl2ToFromColorComboBox.SearchProperties[HtmlComboBox.PropertyNames.Name] = null;
                    this.mUISl2ToFromColorComboBox.SearchProperties[HtmlComboBox.PropertyNames.LabeledBy] = null;
                    this.mUISl2ToFromColorComboBox.FilterProperties[HtmlComboBox.PropertyNames.Size] = "1";
                    this.mUISl2ToFromColorComboBox.FilterProperties[HtmlComboBox.PropertyNames.Title] = null;
                    this.mUISl2ToFromColorComboBox.FilterProperties[HtmlComboBox.PropertyNames.ItemCount] = "17";
                    this.mUISl2ToFromColorComboBox.FilterProperties[HtmlComboBox.PropertyNames.Class] = null;
                    this.mUISl2ToFromColorComboBox.FilterProperties[HtmlComboBox.PropertyNames.ControlDefinition] = "id=sl2ToFromColor tabIndex=0 size=1";
                    this.mUISl2ToFromColorComboBox.FilterProperties[HtmlComboBox.PropertyNames.TagInstance] = "7";
                    this.mUISl2ToFromColorComboBox.WindowTitles.Add("TAF - Microsoft Outlook");
                    #endregion
                }
                return this.mUISl2ToFromColorComboBox;
            }
        }

        public HtmlComboBox UISelColors1ComboBox
        {
            get
            {
                if ((this.mUISelColors1ComboBox == null))
                {
                    this.mUISelColors1ComboBox = new HtmlComboBox(this);
                    #region Search Criteria
                    this.mUISelColors1ComboBox.SearchProperties[HtmlComboBox.PropertyNames.Id] = "selColors1";
                    this.mUISelColors1ComboBox.SearchProperties[HtmlComboBox.PropertyNames.Name] = null;
                    this.mUISelColors1ComboBox.SearchProperties[HtmlComboBox.PropertyNames.LabeledBy] = null;
                    this.mUISelColors1ComboBox.FilterProperties[HtmlComboBox.PropertyNames.Size] = "1";
                    this.mUISelColors1ComboBox.FilterProperties[HtmlComboBox.PropertyNames.Title] = null;
                    this.mUISelColors1ComboBox.FilterProperties[HtmlComboBox.PropertyNames.ItemCount] = "17";
                    this.mUISelColors1ComboBox.FilterProperties[HtmlComboBox.PropertyNames.Class] = null;
                    this.mUISelColors1ComboBox.FilterProperties[HtmlComboBox.PropertyNames.ControlDefinition] = "id=selColors1 tabIndex=0 onchange=Update";
                    this.mUISelColors1ComboBox.FilterProperties[HtmlComboBox.PropertyNames.TagInstance] = "10";
                    this.mUISelColors1ComboBox.WindowTitles.Add("TAF - Microsoft Outlook");
                    #endregion
                }
                return this.mUISelColors1ComboBox;
            }
        }

        public HtmlHyperlink UIUsingViewsHyperlink
        {
            get
            {
                if ((this.mUIUsingViewsHyperlink == null))
                {
                    this.mUIUsingViewsHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIUsingViewsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = "txt3";
                    this.mUIUsingViewsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIUsingViewsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIUsingViewsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Using Views ";
                    this.mUIUsingViewsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "C:/PROGRA~1/MIF5BA~1/Office12/1033/OUTLWVW.DLL/";
                    this.mUIUsingViewsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIUsingViewsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "res://C:\\PROGRA~1\\MIF5BA~1\\Office12\\1033\\OUTLWVW.DLL/";
                    this.mUIUsingViewsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = "option";
                    this.mUIUsingViewsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "style=\"COLOR: window; TEXT-DECORATION: u";
                    this.mUIUsingViewsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "7";
                    this.mUIUsingViewsHyperlink.WindowTitles.Add("TAF - Microsoft Outlook");
                    #endregion
                }
                return this.mUIUsingViewsHyperlink;
            }
        }

        public HtmlList UISelViewList
        {
            get
            {
                if ((this.mUISelViewList == null))
                {
                    this.mUISelViewList = new HtmlList(this);
                    #region Search Criteria
                    this.mUISelViewList.SearchProperties[HtmlList.PropertyNames.Id] = "selView";
                    this.mUISelViewList.SearchProperties[HtmlList.PropertyNames.Name] = null;
                    this.mUISelViewList.SearchProperties[HtmlList.PropertyNames.LabeledBy] = null;
                    this.mUISelViewList.FilterProperties[HtmlList.PropertyNames.Size] = "5";
                    this.mUISelViewList.FilterProperties[HtmlList.PropertyNames.Title] = null;
                    this.mUISelViewList.FilterProperties[HtmlList.PropertyNames.ItemCount] = "8";
                    this.mUISelViewList.FilterProperties[HtmlList.PropertyNames.Class] = null;
                    this.mUISelViewList.FilterProperties[HtmlList.PropertyNames.ControlDefinition] = "style=\"WIDTH: 250px\" id=selView onclick=";
                    this.mUISelViewList.FilterProperties[HtmlList.PropertyNames.TagInstance] = "11";
                    this.mUISelViewList.WindowTitles.Add("TAF - Microsoft Outlook");
                    #endregion
                }
                return this.mUISelViewList;
            }
        }
        #endregion

        #region Fields
        private HtmlHyperlink mUIUsingColorsHyperlink;

        private HtmlComboBox mUISl2ToFromColorComboBox;

        private HtmlComboBox mUISelColors1ComboBox;

        private HtmlHyperlink mUIUsingViewsHyperlink;

        private HtmlList mUISelViewList;
        #endregion
    }

    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIUntitledMessageHTMLWindow : WinWindow
    {

        public UIUntitledMessageHTMLWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Untitled - Message (HTML) ";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "rctrl_renwnd32";
            this.WindowTitles.Add("Untitled - Message (HTML) ");
            #endregion
        }

        #region Properties
        public UIItemWindow4 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow4(this);
                }
                return this.mUIItemWindow;
            }
        }

        public UIItemWindow11 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow11(this);
                }
                return this.mUIItemWindow1;
            }
        }

        public UIItemWindow21 UIItemWindow2
        {
            get
            {
                if ((this.mUIItemWindow2 == null))
                {
                    this.mUIItemWindow2 = new UIItemWindow21(this);
                }
                return this.mUIItemWindow2;
            }
        }

        public UITOWindow UITOWindow
        {
            get
            {
                if ((this.mUITOWindow == null))
                {
                    this.mUITOWindow = new UITOWindow(this);
                }
                return this.mUITOWindow;
            }
        }
        #endregion

        #region Fields
        private UIItemWindow4 mUIItemWindow;

        private UIItemWindow11 mUIItemWindow1;

        private UIItemWindow21 mUIItemWindow2;

        private UITOWindow mUITOWindow;
        #endregion
    }

    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIItemWindow4 : WinWindow
    {

        public UIItemWindow4(UITestControl searchLimitContainer) :
            base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "4099";
            this.WindowTitles.Add("Untitled - Message (HTML) ");
            #endregion
        }

        #region Properties
        public WinEdit UITOEdit
        {
            get
            {
                if ((this.mUITOEdit == null))
                {
                    this.mUITOEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITOEdit.SearchProperties[WinEdit.PropertyNames.Name] = "To";
                    this.mUITOEdit.WindowTitles.Add("Untitled - Message (HTML) ");
                    #endregion
                }
                return this.mUITOEdit;
            }
        }
        #endregion

        #region Fields
        private WinEdit mUITOEdit;
        #endregion
    }

    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIItemWindow11 : WinWindow
    {

        public UIItemWindow11(UITestControl searchLimitContainer) :
            base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "4100";
            this.WindowTitles.Add("Untitled - Message (HTML) ");
            #endregion
        }

        #region Properties
        public WinEdit UICCEdit
        {
            get
            {
                if ((this.mUICCEdit == null))
                {
                    this.mUICCEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICCEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Cc";
                    this.mUICCEdit.WindowTitles.Add("Untitled - Message (HTML) ");
                    #endregion
                }
                return this.mUICCEdit;
            }
        }
        #endregion

        #region Fields
        private WinEdit mUICCEdit;
        #endregion
    }

    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIItemWindow21 : WinWindow
    {

        public UIItemWindow21(UITestControl searchLimitContainer) :
            base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "4101";
            this.WindowTitles.Add("Untitled - Message (HTML) ");
            #endregion
        }

        #region Properties
        public WinEdit UISubjectEdit
        {
            get
            {
                if ((this.mUISubjectEdit == null))
                {
                    this.mUISubjectEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUISubjectEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Subject:";
                    this.mUISubjectEdit.WindowTitles.Add("Untitled - Message (HTML) ");
                    #endregion
                }
                return this.mUISubjectEdit;
            }
        }
        #endregion

        #region Fields
        private WinEdit mUISubjectEdit;
        #endregion
    }

    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UITOWindow : WinWindow
    {

        public UITOWindow(UITestControl searchLimitContainer) :
            base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "4352";
            this.WindowTitles.Add("Untitled - Message (HTML) ");
            #endregion
        }

        #region Properties
        public WinButton UITOButton
        {
            get
            {
                if ((this.mUITOButton == null))
                {
                    this.mUITOButton = new WinButton(this);
                    #region Search Criteria
                    this.mUITOButton.SearchProperties[WinButton.PropertyNames.Name] = "To...";
                    this.mUITOButton.WindowTitles.Add("Untitled - Message (HTML) ");
                    #endregion
                }
                return this.mUITOButton;
            }
        }

        public WinButton UISendButton
        {
            get
            {
                if ((this.mUISendButton == null))
                {
                    this.mUISendButton = new WinButton(this);
                    #region Search Criteria
                    this.mUISendButton.SearchProperties[WinButton.PropertyNames.Name] = "Send";
                    this.mUISendButton.WindowTitles.Add("Untitled - Message (HTML) ");
                    #endregion
                }
                return this.mUISendButton;
            }
        }
        #endregion

        #region Fields
        private WinButton mUITOButton;
        private WinButton mUISendButton;
        #endregion
    }
}
